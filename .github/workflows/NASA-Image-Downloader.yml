name: NASA Images Pipeline

on:
  push:
    branches:
      - test/**
  workflow_dispatch:

jobs:
  preparar:
    runs-on: ubuntu-latest
    outputs:
      dates: ${{ steps.fetch-dates.outputs.dates }}
    
    steps:
      # 1. Consultar el repositorio para acceder al archivo dates.json
      - name: Checkout repository
        uses: actions/checkout@v3
      
      # 2. Instalar jq para procesar el archivo JSON
      - name: Instalar jq
        run: sudo apt-get install -y jq
      
      # 3. Leer fechas del archivo JSON
      - name: Leer fechas del archivo dates.json
        id: fetch-dates
        run: |
          # Ruta al archivo dates.json
          DATES_FILE="dates.json"
          
          # Comprobar si existe el archivo de fechas
          if [ ! -f "$DATES_FILE" ]; then
            echo "Archivo no encontrado: $DATES_FILE"
            exit 1
          fi
          
          # Leer las fechas y convertirlas en una lista JSON
          DATES=$(jq -c '.dates' "$DATES_FILE")
          echo "::set-output name=dates::$DATES"
  
  # Job dinámico para descargar imágenes basado en la lista de fechas
  descargar-imagen:
    needs: preparar
    runs-on: ubuntu-latest
    strategy:
      matrix:
        date: ${{ fromJSON(needs.preparar.outputs.dates) }}  # Convertimos la lista de fechas en una matriz JSON
    continue-on-error: true  # Si un job falla, los otros continúan

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Instalar jq y curl
      - name: Instalar dependencias
        run: |
          sudo apt-get install -y jq curl
      
      # 3. Obtener la imagen de la NASA
      - name: Obtener imagen de la NASA
        run: |
          DATE=${{ matrix.date }}
          echo "Obteniendo imagen para $DATE..."

          # Realizar la solicitud GET a la API de la NASA
          RESPONSE=$(curl -s "https://api.nasa.gov/planetary/apod?api_key=${{ secrets.NASA_API_KEY }}&date=$DATE")

          # Verificar si la respuesta tiene un error
          if echo "$RESPONSE" | jq -e '.error' > /dev/null; then
            echo "Error al obtener datos para $DATE: $(echo $RESPONSE | jq -r '.error.message')"
            exit 0  # No interrumpir el pipeline en caso de error
          fi

          # Extraer la URL de la imagen
          IMAGE_URL=$(echo "$RESPONSE" | jq -r '.url')

          # Descargar la imagen
          IMAGE_NAME="img-$DATE.jpg"
          curl -s -o "$IMAGE_NAME" "$IMAGE_URL"

          # Exportar el nombre de la imagen como un artefacto
          echo "Cargando artefacto para $DATE..."
          echo "image_name=$IMAGE_NAME" >> $GITHUB_ENV

      # 4. Subir la imagen como artefacto
      - name: Subir imagen como artefacto
        uses: actions/upload-artifact@v3
        with:
          name: Imágenes de la NASA - ${{ matrix.date }}
          path: ${{ env.image_name }}
          retention-days: 1
