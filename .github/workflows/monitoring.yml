name: monitor-production

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 21 * * Tue,Wed,Thu"

jobs:
  monitoring-execution:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Java and Gradle
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Clean and prepare environment
        run: gradle clean clearReports

      - name: Run Serenity tests
        id: run-tests
        run: |
          gradle test --tests TestRunnerProduction || echo "tests_failed=true" >> $GITHUB_ENV

      - name: Generate reports
        run: gradle reports

      - name: Set current date and time
        id: date
        run: echo "current_date=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_ENV

      - name: Calculate file size in bytes
        id: calculate-size
        run: |
          FILE="target/site/serenity/serenity-summary.html"
          if [ -f "$FILE" ]; then
            SIZE=$(stat --format=%s "$FILE")
            echo "size=$SIZE" >> $GITHUB_ENV
          else
            echo "File not found: $FILE"
            exit 1
          fi

      - name: Get Slack upload URL
        run: |
          # Usa la variable size que calculaste anteriormente
          response=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.SLACK_TOKEN_BOTS }}" \
            -H "Content-Type: application/x-www-form-urlencoded; charset=utf-8" \
            -d "filename=target/site/serenity/serenity-summary.html" \
            -d "length=${{ env.size }}" \
            https://slack.com/api/files.getUploadURLExternal)
          
          echo "$response"
          
          # Extrae la URL de carga de la respuesta
          upload_url=$(echo "$response" | jq -r '.upload_url')
          
          # Verifica si se obtuvo correctamente la URL de carga
          if [ "$upload_url" == "null" ]; then
            echo "Error fetching upload URL: $response"
            exit 1
          fi

          # Guarda la URL de carga para usarla en los siguientes pasos
          echo "upload_url=$upload_url" >> $GITHUB_ENV
          
          # Extrae la URL de carga de la respuesta
          file_id=$(echo "$response" | jq -r '.file_id')
          
          # Verifica si se obtuvo correctamente la URL de carga
          if [ "$file_id" == "null" ]; then
            echo "Error fetching upload URL: $response"
            exit 1
          fi

          # Guarda la URL de carga para usarla en los siguientes pasos
          echo "file_id=$file_id" >> $GITHUB_ENV

      - name: Upload file to Slack
        run: |
          # Realiza la carga del archivo y guarda la respuesta en una variable
          response_upload=$(curl -s -X POST \
          -H "Content-Type: text/html" \
          -H "Cookie: b=13c64025dfc69e83ce80ae4049ba7bb0; utm=%7B%7D; x=13c64025dfc69e83ce80ae4049ba7bb0.1733948334" \
          --data-binary @target/site/serenity/serenity-summary.html \
          "${{ env.upload_url }}")

          # Imprime la respuesta para depuración
          echo "respuesta: $response_upload"
          
          # Extrae el número de la respuesta (51461)
          id=$(echo $response_upload | awk -F ' - ' '{print $2}')

          # Imprime el número extraído
          echo "id: $id"
          
          # Guarda la URL de carga para usarla en los siguientes pasos
          echo "id=$id" >> $GITHUB_ENV

      - name: Complete Slack upload
        run: |
          # Realiza la llamada para completar la carga del archivo
          response_url=$(curl -s -X POST \
          -H "Authorization: Bearer ${{ secrets.SLACK_TOKEN_BOTS }}" \
          -H "Content-Type: application/json; text/html; charset=utf-8" \
          -d '{"files":[{"id":"'"${{ env.file_id }}"'"}]}' \
          https://slack.com/api/files.completeUploadExternal)
        
          # Imprime la respuesta para depuración
          echo "Slack API response: $response_url"
        
          # Extrae la URL de carga de la respuesta
          url_private=$(echo "$response_url" | jq -r '.files[0].url_private')
          
          # Verifica si se obtuvo correctamente la URL de carga
          if [ "$url_private" == "null" ] || [ -z "$url_private" ]; then
          echo "Error fetching upload URL: $response_url"
          exit 1
          fi
          
          # Guarda la URL de carga para usarla en los siguientes pasos
          echo "url_private=$url_private" >> $GITHUB_ENV
          
          # Imprime la respuesta para depuración
          echo "URL html: $url_private"


      - name: Notificar a Slack
        run: |
          if [ "${{ env.tests_failed }}" == "true" ]; then
            curl -X POST -H 'Content-type: application/json' \
            --data '{"text":":rotating_light:¡Atención equipo!:rotating_light:\n\nParece que algo no anda bien con los widgets/banners :scream:. ¡Se presentó un pequeño fallo! :hammer_and_wrench:\n\n:mag: Revisa por favor para que todo vuelva a la normalidad. ¡Gracias por estar al tanto! :spock-hand:\n\n\n:warning:Revisa el reporte de pruebas aquí: '"${{ env.url_private }}"'. No olvides instalar ModHeader y agregar tu token de Slack.:warning:\n\n\n\n:cat:","channel":"#automatizacion-pruebas-prd"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
          else
            curl -X POST -H 'Content-type: application/json' \
            --data '{"text":":confetti_ball: ¡Éxito total, equipo! :confetti_ball:\n\nLas pruebas realizadas en producción a los aliados salieron de maravilla :sparkles: :muscle:.\n\nTodo está funcionando como debería. ¡Gran trabajo! :tada: Sigamos brillando. :rocket:\n\n\n:warning:Revisa el reporte de pruebas aquí: '"${{ env.url_private }}"'. No olvides instalar ModHeader y agregar tu token de Slack.:warning:\n\n\n\n:cat:","channel":"#automatizacion-pruebas-prd"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
          fi





