name: Get images from NASA

on:
  push:
    branches:
      - main

jobs:
  read-json:
    name: Reading json file and building parallels
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read json file
        id: readjson
        uses: antifree/json-to-variables@v1.2.0
        with:
          filename: 'dates.json'
          prefix: 'dates'

      - name: Set matrix for jobs
        id: set_matrix
        run: |
          vars=($(env | grep '^dates_dates_' | awk -F'=' '{print $2}'))
          matrix_json=$(echo "[\"$(echo ${vars[*]} | sed 's/ /\", \"/g')\"]")
          echo "matrix=$matrix_json" >> "$GITHUB_OUTPUT"

  process-images:
    name: Image processing
    runs-on: ubuntu-latest
    needs: read-json
    strategy:
      fail-fast: false
      matrix:
        dates: ${{ fromJson(needs.read-json.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Evaluate image cache
        id: cache-api-response
        uses: actions/cache@v4
        env:
          cache-name: cache-api-response
        with:
          path: responses/apod-${{ matrix.dates }}.json
          key: cache-api-response-${{ matrix.dates }}
          restore-keys: |
            cache-api-response-

      - name: Execute GET request if cache does not exist
        id: fetch_image
        if: ${{ steps.cache-api-response.outputs.cache-hit != 'true' }}
        run: |
          echo "Consultando la fecha: ${{ matrix.dates }}"
          response=$(curl -s -X GET "https://api.nasa.gov/planetary/apod?api_key=${{ secrets.API_KEY }}&date=${{ matrix.dates }}")
          echo "Response: $response"
          image_url=$(echo "$response" | jq -r '.url // empty')
          if [ -z "$image_url" ]; then
            echo "No image URL found for date: ${{ matrix.dates }}"
            exit 1
          fi
          echo "image_url=$image_url" >> $GITHUB_ENV

      - name: Determine image extension
        id: determine-ext
        run: |
          if [[ "${{ env.image_url }}" == *.jpg ]]; then
           echo "ext=jpg" >> $GITHUB_ENV
          elif [[ "${{ env.image_url }}" == *.png ]]; then
           echo "ext=png" >> $GITHUB_ENV
          else
           echo "No valid image extension found. Skipping."
           exit 1
          fi

      - name: Download image from URL
        if: ${{ steps.cache-api-response.outputs.cache-hit != 'true' }}
        uses: minituff/save-image@v1.4
        with:
          url: ${{ env.image_url }}
          imagePath: 'img-${{ matrix.dates }}.${{ env.ext }}'
        continue-on-error: true

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: img-${{ matrix.dates }}
          path: img-${{ matrix.dates }}.${{ env.ext }}
          retention-days: 1