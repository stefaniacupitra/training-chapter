name: Imágenes de la NASA

#EVENTO
on:
  push:
    branches:
      - main

#JOBS
jobs:

  #JOB 1
  preparacion-para-descarga:
    runs-on: ubuntu-latest #RUNNER
    outputs:
      fechas: ${{ steps.fetch-dates.outputs.dates }}

    steps:
      #STEP 1 - consulta el repositorio para acceder al archivo dates.json
      - name: Checkout repository
        uses: actions/checkout@v4

      # 3. Leer fechas del archivo JSON
      - name: Leer fechas del archivo dates.json
        id: fetch-dates
        run: |
          # Ruta al archivo dates.json
          DATES_FILE="dates.json"
          
          # Comprobar si existe el archivo de fechas
          if [ ! -f "$DATES_FILE" ]; then
            echo "Archivo no encontrado: $DATES_FILE"
            exit 1
          fi
          
          # Leer las fechas y convertirlas en una lista JSON
          DATES=$(jq -c '.dates' "$DATES_FILE")
          echo "dates=$DATES" >> $GITHUB_OUTPUT

  # Job dinámico para descargar imágenes basado en la lista de fechas
  descargar-imagen:
    needs: preparar
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        date: ${{ fromJSON(needs.preparar.outputs.dates) }}  # Convertimos la lista de fechas en una matriz JSON

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cache
      - name: Cache
        id: cache_img  # Cambiado para no usar guiones
        uses: actions/cache@v4
        env:
          cache-name: cache_img
        with:
          path: img-${{ matrix.date }}.jpg  # matrix.date, no matrix.dates
          key: cache-img-${{ matrix.date }}
          restore-keys: |
            cache-img-
      
      # 4. Obtener la imagen de la NASA
      - name: Obtener imagen de la NASA
        id: fetch_image
        if: ${{ steps.cache_img.outputs.cache-hit != 'true' }}  # Correcta referencia sin guion
        run: |
          DATE=${{ matrix.date }}
          echo "Obteniendo imagen para $DATE..."

          # Realizar la solicitud GET a la API de la NASA
          RESPONSE=$(curl -s "https://api.nasa.gov/planetary/apod?api_key=${{ secrets.NASA_API_KEY }}&date=$DATE")

          # Verificar si la respuesta tiene un error
            echo "Error al obtener datos para $DATE: $(echo $RESPONSE | jq -r)"

          # Extraer la URL de la imagen
          IMAGE_URL=$(echo "$RESPONSE" | jq -r '.url')

          # Descargar la imagen
          IMAGE_NAME="img-$DATE.jpg"
          curl -s -o "$IMAGE_NAME" "$IMAGE_URL"

          # Exportar el nombre de la imagen como un artefacto
          echo "Cargando artefacto para $DATE..."
          echo "image_name=$IMAGE_NAME" >> $GITHUB_ENV

      # 5. Subir la imagen como artefacto
      - name: Subir imagen como artefacto
        if: ${{ steps.cache_img.outputs.cache-hit != 'true' }}  # Referencia corregida sin guion
        uses: actions/upload-artifact@v4
        with:
          name: Imágenes de la NASA - ${{ matrix.date }}
          path: ${{ env.image_name }}
          retention-days: 1
