#JOBS
jobs:

  #JOB 1
  preparacion-para-descarga:
    runs-on: ubuntu-latest
    outputs:
      fechas: ${{ steps.obtener-fechas.outputs.dates }}

    steps:
      #STEP 1 - Consultar el repositorio para acceder al archivo dates.json
      - name: Consultar repositorio
        uses: actions/checkout@v4 #ACTIONS
      #STEP 2 - Leer fechas del archivo dates.json
      - name: Leer fechas del archivo dates.json
        id: obtener-fechas
        run: |
          ARCHIVO_DE_FECHAS="dates.json"
          if [ ! -f "$ARCHIVO_DE_FECHAS" ]; then
            echo "Archivo no encontrado: $ARCHIVO_DE_FECHAS"
            exit 1
          fi
          DATES=$(jq -c '.dates' "$ARCHIVO_DE_FECHAS")
          echo "dates=$DATES" >> $GITHUB_OUTPUT

  #JOB 2
  descarga-imagen:
    needs: preparacion-para-descarga
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        fecha: ${{ fromJSON(needs.preparacion-para-descarga.outputs.fechas) }}
    outputs:
      response: ${{ steps.descarga-imagen.outputs.response }}

    steps:
      #STEP 1 - Consultar el repositorio
      - name: Consultar repositorio
        uses: actions/checkout@v4

      #STEP 2 - Logica para usar cache
      - name: Cache de respuesta API
        id: cache_api
        uses: actions/cache@v4
        env:
          cache-name: respuesta_cache
        with:
          path: respuesta-${{ matrix.fecha }}.json
          key: cache-respuesta-${{ matrix.fecha }}
          restore-keys: |
            cache-respuesta-

      #STEP 3 - Obtener la respuesta de la API y guardar en cache
      - name: Obtener respuesta de la NASA
        if: ${{ steps.cache_api.outputs.cache-hit != 'true' }}
        run: |
          DATE=${{ matrix.fecha }}
          echo "Obteniendo respuesta para $DATE..."
          # Realizar la solicitud GET a la API de la NASA
          RESPONSE=$(curl -s "https://api.nasa.gov/planetary/apod?api_key=${{ secrets.API_KEY }}&date=$DATE")
          # Guardar la respuesta en un archivo JSON
          echo "$RESPONSE" > respuesta-${DATE}.json
          echo "respuesta_guardada=respuesta-${DATE}.json" >> $GITHUB_ENV

      #STEP 4 - Subir la respuesta como artefacto
      - name: Subir respuesta como artefacto
        if: ${{ steps.cache_api.outputs.cache-hit != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: respuesta-${{ matrix.fecha }}
          path: respuesta-${{ matrix.fecha }}.json
          retention-days: 1

      #STEP 5 - Extraer la URL de la imagen y descargarla
      - name: Extraer URL de imagen y descargar
        run: |
          DATE=${{ matrix.fecha }}
          # Si está en cache, cargar el archivo JSON desde cache
          if [ -f "respuesta-${DATE}.json" ]; then
            echo "Leyendo respuesta desde cache..."
            IMAGE_URL=$(jq -r '.url' respuesta-${DATE}.json)
          else
            IMAGE_URL=$(jq -r '.url' ${{ env.respuesta_guardada }})
          fi
          # Descargar la imagen
          IMAGE_NAME="img-$DATE.jpg"
          curl -s -o "$IMAGE_NAME" "$IMAGE_URL"
          echo "image_name=$IMAGE_NAME" >> $GITHUB_ENV

      #STEP 6 - Subir la imagen como artefacto
      - name: Subir imagen como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: img-${{ matrix.fecha }}
          path: ${{ env.image_name }}
          retention-days: 1
