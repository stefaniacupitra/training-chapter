name: Imágenes de la NASA
#EVENTO
on:
  push:
    branches:
      - test/**

#JOBS
jobs:

  #JOB 1
  preparacion-para-descarga:
    runs-on: ubuntu-latest
    outputs:
      fechas: ${{ steps.obtener-fechas.outputs.dates }}

    steps:
      #STEP 1 - Consultar el repositorio para acceder al archivo dates.json
      - name: Consultar repositorio
        uses: actions/checkout@v4 #ACTIONS
      #STEP 2 - Leer fechas del archivo dates.json
      - name: Leer fechas del archivo dates.json
        id: obtener-fechas
        run: | #SHELL
          # Ruta al archivo dates.json
          ARCHIVO_DE_FECHAS="dates.json"
          # Comprobar si existe el archivo de fechas
          if [ ! -f "$ARCHIVO_DE_FECHAS" ]; then
            echo "Archivo no encontrado: $ARCHIVO_DE_FECHAS"
            exit 1
          fi
          # Leer las fechas y convertirlas en una lista JSON
          DATES=$(jq -c '.dates' "$ARCHIVO_DE_FECHAS")
          echo "dates=$DATES" >> $GITHUB_OUTPUT

  #JOB 2
  descargar-imagenes:
    needs: preparacion-para-descarga
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        fecha: ${{ fromJSON(needs.preparacion-para-descarga.outputs.fechas) }}
        
    steps:
      #STEP 1 - Consultar el repositorio
      - name: Consultar repositorio
        uses: actions/checkout@v4 #ACTIONS
      #STEP 2 - Logica para usar cache
      - name: Cache
        id: imagen_cache
        uses: actions/cache@v4 #ACTIONS
        env:
          cache-name: imagen_cache
        with:
          path: img-${{ matrix.fecha }}.jpg
          key: cache-img-${{ matrix.fecha }}
          restore-keys: |
            cache-img-
      #STEP 3 - Obtener la imagen de la NASA
      - name: Obtener imagen de la NASA
        if: ${{ steps.imagen_cache.outputs.cache-hit != 'true' }}
        run: | #SHELL
          DATE=${{ matrix.fecha }}
          echo "Obteniendo imagen para $DATE..."
          # Realizar la solicitud GET a la API de la NASA
          RESPONSE=$(curl -s "https://api.nasa.gov/planetary/apod?api_key=${{ secrets.NASA_API_KEY }}&date=$DATE")
          # Verificar si la respuesta tiene un error
          echo "Error al obtener datos para $DATE: $(echo $RESPONSE | jq -r)"
          # Extraer la URL de la imagen
          IMAGE_URL=$(echo "$RESPONSE" | jq -r '.url')
          # Descargar la imagen
          IMAGE_NAME="img-$DATE.jpg"
          curl -s -o "$IMAGE_NAME" "$IMAGE_URL"
          # Exportar el nombre de la imagen como un artefacto
          echo "Cargando artefacto para $DATE..."
          echo "image_name=$IMAGE_NAME" >> $GITHUB_ENV
      #STEP 4 - Subir la imagen como artefacto
      - name: Subir imagen como artefacto
        if: ${{ steps.imagen_cache.outputs.cache-hit != 'true' }}
        uses: actions/upload-artifact@v4 #ACTIONS
        with:
          name: img-${{ matrix.fecha }}
          path: ${{ env.image_name }}
          retention-days: 1
